<?php
/**
 * @package		DottedBytes
 * @copyright	Copyright (C) 2009 -2010 DottedBytes. All rights reserved.
 * @license		GNU/GPL, see COPYING file
 * @author		Daniel Zozin
 *
 * This file is part of DottedBytes.
 * DottedBytes is free software: you can redistribute it and/or modify
 * it under the terms of the GNU General Public License as published by
 * the Free Software Foundation, either version 3 of the License, or
 * (at your option) any later version.
 * DottedBytes is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with DottedBytes.  If not, see <http://www.gnu.org/licenses/>.
 *
 */

namespace dottedBytes\libs\modules;

use dottedBytes\libs\users\auth\PermissionException;

use dottedBytes\libs\modules\ModuleBuilder;

use dottedBytes\libs\modules\menu\MenuNode;

use dottedBytes\libs\utils\Comparable;

use dottedBytes\libs\utils\ObjectUtils;

use dottedBytes\libs\io\PageData;

use dottedBytes\libs\errorHandling\CmsException;

use dottedBytes\libs\configuration\Configuration;

use dottedBytes\libs\users\permissions\Permission;

use dottedBytes\libs\users\permissions\PermissionSet;

use dottedBytes\libs\pageBuilder\PageBuilder;

use dottedBytes\libs\pageBuilder\Content;

if (! defined ( 'VALID_REQUEST' ))
	die ( 'Direct access denied!' );

abstract class Module implements Comparable {
	
	/**
	 * The identifier of the module
	 * @var int
	 */
	protected $ID;
	/**
	 * The name of the module
	 * @var string
	 */
	protected $name;
	
	protected $attributes = array ();
	
	/**
	 * This field contains the page content generated by the subclasses
	 * @var Content
	 */
	private $moduleContent;
	private $initializeException = null;
	
	/**
	 * This function must be override by subclasses to create the module content
	 * @return Content
	 */
	protected abstract function buildContent();
	
	/**
	 * Returns true if the passed user permissions are enought to access the module, throw a PermissionException otherwise
	 * @param PermissionSet $userPermissions
	 * @throws PermissionException
	 */
	public abstract function checkPermissions(PermissionSet $userPermissions);
	
	public function __construct(ModuleBuilder $builder = null) {
		ModUtils::setCurrentModule ( $this );
		if ($builder != null)
			$this->build ( $builder );
	}
	
	private function build(ModuleBuilder $builder) {
		$this->ID = $builder->getID ();
		$this->name = $builder->getName ();
	}
	
	public final function getConfigValue($relativePath, $default = '') {
		return Configuration::getValue ( 'module.' . $this->getName () . '.' . $relativePath, $default );
	}
	
	public final function getBasePath() {
		return BASEPATH . '/modules/' . $this->getName ();
	}
	
	public final function getBaseUrl() {
		return BASEURL . '/modules/' . $this->getName ();
	}
	
	/**
	 * Return the Content of this module
	 * @return Content
	 */
	public final function getContent() {
		if ($this->moduleContent == null)
			$this->generateContent ();
		
		return $this->moduleContent;
	}
	
	private function generateContent() {
		if ($this->initializeException != null) {
			$this->moduleContent = PageBuilder::getExceptionPage ( $this->initializeException );
			return;
		}
		
		try {
			$this->moduleContent = $this->buildContent ();
		} catch ( CmsException $e ) {
			$this->moduleContent = PageBuilder::getExceptionPage ( $e );
		}
		
		if ($this->moduleContent == null)
			$this->moduleContent = $this->getContentErrorPage ();
	}
	
	private function getContentErrorPage() {
		if (count ( $_GET ) == 1 && PageData::getParam ( 'error', false ) !== false && $this instanceof Component) {
			return PageBuilder::getExceptionPage ( new PageNotFoundException () );
		} else {
			return $this->moduleContent;
		}
	}
	
	public final function setInitializeException(CmsException $e) {
		$this->initializeException = $e;
	}
	
	/**
	 * @return int
	 */
	public function getID() {
		return $this->ID;
	}
	
	/**
	 * @return string
	 */
	public function getName() {
		return $this->name;
	}
	
	public function getAttribute($name) {
		if (array_key_exists ( $name, $this->attributes ))
			return $this->attributes [$name];
		return null;
	}
	
	public function setAttribute($name, $value) {
		$this->attributes [$name] = $value;
	}
	
	/**
	 * Compare modules by id
	 *
	 * @param Module $obj
	 * @return int
	 */
	public function compareTo(Comparable $obj = null) {
		/* @var $obj Module */
		ObjectUtils::checkType ( $obj, 'dottedBytes\libs\modules\Module' );
		return strcmp ( $this->ID, $obj->getID () );
	}
	
	public function equals(Comparable $obj = null) {
		return ($this->compareTo ( $obj ) == 0);
	}
	
	public function __toString() {
		return $this->name . " (#" . $this->ID . ")";
	}
}

class ModuleBuilder {
	
	/**
	 * The identifier of the module
	 * @var int
	 */
	private $id;
	/**
	 * The name of the module
	 * @var string
	 */
	private $name;
	
	/**
	 * The identifier of the module
	 * @param int $id
	 * @return ModuleBuilder
	 */
	public function id($id) {
		$this->id = (int) $id;
		return $this;
	}
	
	/**
	 * The name of the module
	 * @param string $name
	 * @return ModuleBuilder
	 */
	public function name($name) {
		$this->name = (string) $name;
		return $this;
	}
	
	public function getId() {
		return $this->id;
	}
	
	public function getName() {
		return $this->name;
	}
}

?>